Notes
-----

What are the queries?

Inputs:
 - Date
 - Rubric-set
 - General calendar
 - Local calendar (partially calculated e.g. from patrons?)
 - Potentially lots of specific things (dignity of celebrant, things ad libitum, indults, ...)
 - Which office

How are special-case offices handled?  Somehow we need to work out that _this_ office has different rules from normal.  Probably these should be returned instead of the usual offices in the list of offices for the day.

Pseudocode showing data flow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>>> # Need to avoid calling everything an "office".
>>> office_map = SomeClassThatMapsCalpointsToOffices()
>>> calendar = Calendar1960(office_map)
>>> # Case in point:
>>> offices = calendar.offices(2020, 4, 21)
>>> offices
[Matins(...), Lauds(...), ...]
>>> # How do we indicate that some offices should be said together?
>>> vespers = offices[n]
>>> list(vespers.render())
[
   Versicle(text='versiculi/deus-in-adjutorium'),
   VersicleResponse(text='versiculi/domine-ad-adjuvandum'),
   Text(text='versiculi/gloria-patri'),
   Text(text='versiculi/sicut-erat'),
   Text(text='versiculi/alleluja'),
]
>>> 

Some thoughts on the above:

 - Golden rule: resolve() until you get a Text (or one of its subclasses), then render().
 - Presentation layer is entirely responsible for line breaks etc.
 - We could subclass the renderable things, and do multiple dispatch in the presentation layer.
 - We probably want some sort of support for recursion, to allow grouping.
 - In fact, we'll definitely want that.  All structure should come of out of rendering layer, to be interpreted (or not) by the presentation layer.
 - Then again, only at the final rendering stage do we want to generate presentable strings, because these must be localised.  This suggests that recursion shouldn't go all the way down.
 - Titles, and any other annotations, are generated in the presentation layer.  Renderable objects could possibly provide some hints.

OK, how about the data-lookup layer?

>>> data_store = DataStore(...?)
>>> data_store.lookup('versiculi', 'domine-ad-adjuvandum')
"Dómine, ad adjuvándum me festína."

 - Templating could be used for commons and suchlike.  The templates would be expanded in the rendering layer.  E.g. ``TemplatedText('commune/doctorum/ad-magnificat', {'N': 'Robérte'})``.


Case studies in proper-lookups
------------------------------

All offices can have propers.
If a proper is lacking...

Feasts, octaves: mostly undefined, with a few exceptions: prefaces, various parts of the
little hours (including hymns! Pentecost).

Sundays, ferias, vigils: from the season, or failing that, the psalter.

Should we define the psalter to be psalms and antiphons only?  And have a
per-annum season for the green things.

Feria in Christmastide: No propers; season has the hymns and so forth.  Psalms
from the psalter.

Yes, I think this is a sensible way to do it.

Note that the season and psalter depend on the day and (for the former) the
week.

What about Lauds II?  Make that something internal to Lauds, and whether to
look up Lauds I or II in the psalter.

So, how to implement it?

Observation!  The lack of an office in the calendar for a calpoint doesn't
imply lack of stuff in the psalter (incl. season) for that calpoint.

E.g. Vespers wants to look up psalms and antiphons.
    if 'proprium/{{key}}/ad-vesperas/antiphonae' in data:
        ok
    elif 'psalterium/post-pentecosten/hebdomada-8/feria-3/ad-vesperas/antiphonae':
        ok
    # And then...
    'psalterium/post-pentecosten/hebdomada-8/ad-vesperas/antiphonae'
    'psalterium/post-pentecosten/ad-vesperas/antiphonae'
    'psalterium/ad-vesperas/antiphonae'

Months have to fit in there too.  Should they take precedence over post-Pent?

What about the Septuagesima antiphons?  Need to be able to refer to the results
of the translation logic to find the next free antiphon.

For each lookup, the logic for the particular office (e.g. the Vespers class)
would construct a search order.

We need to define Christmas-Epiphany temporal time.

Nat0
Christmas
Nat1
Nat2
[Vigil of Epi]
Epiphany
Epi1 week is weird, because it's split-season

Plan B: No Christmas-Epiphany season; use propers for the post-1955 ferias.


Default offices
~~~~~~~~~~~~~~~

These must be sometimes in addition to explicit offices, and sometimes only
if there are no explicit offices (and currently are used to supply defaults to
explicit offices, but perhaps this is not needed...?).

Also, we can't decide that we don't need a default office until after we've
filtered for first/second vespers.

Here's a thought: how about moving default offices into the calendar itself?
We'd still need to distinguish between in-addition-to (e.g. Solemnity of St
Joseph) and replaced-by (e.g. holy week).

Possible idea: For meta-yaml, split files into "create/update/delete" sections.


Idea scratchpad
~~~~~~~~~~~~~~~

Testalyzer: Declare a result to be good; add it to a database of tests.


Specials
~~~~~~~~

Epiphany Matins
Benedicite (no Gloria)
Responsories: Gloria
Triduum
Easter octave

Use dictionaries to indicate structured data.
Benedicite:
  - [92]
  - [99]
  - [62]
  - some_keyword: [benedicite]
  - [148]
Responsory:
  - Lorem ipsum * dolor sit amet.
  - Consectetur adipiscing elit.
This could be a short form of either a Gloria-responsory or a Gloria-less resp.
It would be possible to make it more explicit by including more list items.

- Something
- rubricum: Bow
- Something else
- Something other

psalmus:
  - Something
  - rubricum: Bow
  - Something else
  - Something other

psalmus:
  - versum_psalmi: Something
  - rubricum: Bow
  - versum_psalmi: Something else
  - versum_psalmi: Something other

When do we stop?
Something like "wantarray".

Structured lookup
~~~~~~~~~~~~~~~~~

Renderable object with a reference to a data-store path, together with a recipe
for translating the looked-up value to a renderable hierarchy.

It would go something like this:

    interpreters = {
        'psalmus': lambda raw: frob_list('versum_psalmi', raw),
        'versum_psalmi': 
    }

    def frob_scalar(default_interpretation, raw):
        try:
            [(key, value)] = raw.items()
        except ValueError:
            # Too many/few keys.
            raise SomethingError()
        except AttributeError:
            # Not a dictionary.
            key = default_interpretation
            value = raw

        # Despatch according to key.
        return interpreters[key](value)

    def frob_list(default_interpretation, raw):
        if not isintstance(raw, list):
            raw = [raw]
        return [frob_scalar(default_interpretation, raw_thing)
                for raw_thing in raw]

    raw = data_store.lookup(path)
    renderable = frob_scalar('psalmus', raw)

So we need to provide a dictionary of interpreters, and a default interpreter.

Can we keep the dict global?  It would be nice...

Who makes the decision about the top-level class?  Currently this is in the
Vespers class, but it should maybe be from the data, with the office class
supplying only the default.

StructuredLookup('foo/bar/baz', Antiphon) |-> Antiphon('Lorem ipsum * dolor sit amet.')

['Lorem', [{'foo': 'ipsum'}, {'bar': 'dolor'}], 'sit', 'amet.']
-- Not convinced that permitting the nested lists makes sense.

Groups promote non-lists to lists.
Non-groups with non-lists: easy.
Non-groups with lists: error??  This would mean arbitrary nesting not possible.

Text('Lorem ipsum.')
Group(stuff)
Psalmody(antiphons_path, psalms)
SL(path, default_class)

Seasonal parts
~~~~~~~~~~~~~~

How well-defined is this?

Lent: Hymn, ferial chapter, etc. etc.
But only for the first four weeks.
The current logic for falling back to Sundays is wrong: we shouldn't pick up
_all_ propers of the preceding Sunday in preference to the psalter.  (E.g.
antiphons in Lent for Lauds, and for Advent.)

Some questions:
- How do we define and identify seasons?
- Which propers for Sundays persist through the week?
  - Really only the propers that overlap with Mass.  And Matins responsories??
- What about the reading weeks from Aug-Nov?

- proprium:
  - de-tempore:
    - in-quadragesima:
      - ad-vesperas:
        - hymnus
        - versum
      - in-feriis:
        - ad-vesperas:
          - capitulum
        - infra-hebdomadam-i:
          - feria-ii:
            - ad-vesperas:
              - ad-magnificat
            - oratio
            - oratio-super-populum
    - post-pentecosten:
      - in-dominicis:
        - dominica-viii:
          - ...

Actually, it needn't be quite so strictly hierarchical, if we allow arbitrary
lists of lookup points, rather than saying that you just walk the tree.  So
where would we specify this list??  Maybe we should repurpose the "titulus"
descriptor field.  And while we're thinking about this: how do we handle
_partial_ fallbacks, e.g. to commons, where we often want to fall back further
to the psalter for some things that do have common texts?

Try splitting the commons in two: psaltery bits and other bits.  And Matins
lessons?  Tricky, because it depends on the active rubrics whether we take
non-psaltery or everything.  Is suppose we could do the rubric-conditional
redirection inside the commons themselves.

So what would multiple-lookup look like?
- It can't be completely static, because the layers can vary (e.g. reading
  weeks).
- Actually, we should handle reading weeks like the psalter.
- So each descriptor should have a list of keys.
- And commons should be handled there, not in the redirections.

- calendarium/Pasc1-0:
  - classis: 1
    qualitas: dominica
    ritus: duplex majus
    status: major
    claves:
    - proprium/dominica-in-albis-in-octava-paschæ
- calendarium/Quadp3-6:
  - qualitas: feria
    ritus: simplex
    status: major
    claves:
    # We'll fix this later.
    - proprium/sabbato-post-cineres
    - proprium/de-tempore/quadragesima/in-feriis

Maybe being explicit in the descriptor is not so good.  It would be nicer to
deduce it, which should always be possible.  But probably we should move to the
multi-key arrangement anyway, for the sake of commons.

Conclusions of prayers
~~~~~~~~~~~~~~~~~~~~~~

- Don't store conclusions with translations.
- Keep a separate map of prayer-keys -> conclusions.
- When eventually we have real datafiles, we could store the conclusions with
  the Latin of the prayers, and do a post-processing step to split them.

Hymn versification
~~~~~~~~~~~~~~~~~~

Hymn
- Hymn verse
  - Hymn line
  - Hymn line
  - Hymn line
  - Hymn line
- Hymn verse
  - Hymn line
  - Hymn line
  - Hymn line
  - Hymn line

What about doxologies?  Meters?
Extend StructuredLookup to push nested structure.


Properties
~~~~~~~~~~

For example, scriptural citations.  And titles.
- How do we encode them in the descriptors?
- And how do we expose them to clients?

- Titles at least should probably be renderable things, or at least things that
  are looked up through the data.  Yeah, not renderable.  How do we look up the
  data in the presentation layer?

One thing we could do is to extend the "lists of stuff are glommed" paradigm to
be "list items are args, dict items are kwargs".

No, that doesn't quite work, because you need to be able to embed (e.g.)
rubrics in the midst of other things, and we already use dictionaries for
those.

- "Lorem ipsum"
- "dolor sit amet."

'type': 'capitulum'
'content':
  - "Lorem ipsum"
  - "dolor sit amet."

'scripture_ref': '1 Book 2:3'
'content':
  - "Lorem ipsum"
  - "dolor sit amet."


Textual transformations
~~~~~~~~~~~~~~~~~~~~~~~

- Fill in names
- Add "Alleluia"
- Remove ditto
- Orthography

For alleluia, add two parameters to each language: one for detecting whether
alleluia needs to be added (i.e. isn't there already) and another for the
thing to add.

if not re.search(alleluia_pattern + r'\W*$', text):
    text = re.sub(r'\W*$', alleluia + '.', text)


Multiple offices
~~~~~~~~~~~~~~~~
- Several things could come under this title:
  - Firstly, just all of the usual offices of the day.
  - Office of the dead.
  - Gradual psalms, etc.
  - Little office.
  - Multiple Masses of the day in conventual/collegiate churches.
  - Votive Masses.
  - Asperges.
  - Processions.
  - Blessings.
  - Stripping of the altars.
  - Mandatum.
  - Noveritis.
- Observation: Some of this ties in quite closely with the generation of the
  ordo recitandi.
- Somehow we need to express when one office is inseparable from another.
- And be able to identify when the occurrence of an office is unusual.
- Maybe: Don't worry about low Mass and other private things.  Well... except
  that the ordo will want to say some things about private Masses.
- How about this for offices:
  OrderedDict([
    ('matins-and-lauds', [Matins, Lauds, MatinsOfTheDead, LaudsOfTheDead]),
    ('prime', [Prime]),
    ('terce', [Terce]),
    ('mass', [Mass]),
    ('sext', [Sext]),
    ('none', [None]),
    ('extra-mass-1', [RequiemMass]),
    ('vespers', [Vespers]),
    ('compline', [Compline]),
  ])
  OrderedDict([
    ('matins-and-lauds', [TriduumMatins, TriduumLauds]),
    ('prime', [TriduumPrime]),
    # ...
    ('mass', [Mass, ProcessionToTheAltarOfRepose]),
    ('vespers', [TriduumVespers, StrippingOfTheAltars]),
    ('mandatum', [Mandatum]),
    ('compline', [TriduumCompline]),
  ])


Office of the dead
~~~~~~~~~~~~~~~~~~

IDEA: Make OfTheDead an office-type alongside Feria, Feast, Sunday, ...


Autumn weeks
~~~~~~~~~~~~
  - Even the current arrangement of passing in season as an argument to Vespers
    is wrong, because it can vary between multiple offices in a day...  well...
    OK, so I suppose the _season_ can't vary.  So actually that's OK.  But
    the seasonal lookup keys will vary according to the office.  Or will they??
  - And don't forget Matins lessons.
  - The season is NOT a property of the office (because e.g. a given feast can
    fall in different seasons).
  - And it's NOT a property of the date (because first Vespers).
  - But it is a property of (date, hour).
  - And this fully determines the set of keys.
  - Sometimes, season-keys should take precedence over office-keys (e.g. for
    Matins lessons when the office is from the common, and for the Sundays
    after Pentecost that might or might not fall in Aug/Sep).
  - It's not quite true that seasonal days never overlap (Ember days).  But
    their seasons will at least be consistent.
  - For the great vigils, the season changes mid-office.
- Let's see what season_keys would look like:
  - ('2021-09-25', Vespers) |-> ['hebdomada-iv-septembris/dominica']
  - The keys should match the corresponding calpoints.  So for now, go with
    '094-0'.
  - For temporal offices, season_keys should take precedence over proper keys,
    but not for sanctoral offices.


Doxologies
~~~~~~~~~~

- Example (now discarded):
  - - Ob hoc precátu súpplici
    - Te póscimus, piíssime;
    - In hoc triúmpho Mártyris
    - Dimítte noxam sérvulis.
  - type:
      doxology-or-something
    content:
      - Laus et perénnis glória
      - Patri sit, atque Fílio,
      - Sancto simul Paráclito,
      - In sempitérna sǽcula.
      - Amen.
- Hmm.  Or should the annotation be on the whole hymn?  Probably so.
- It could go something like this, in chapter_hymn_and_verse():
  - Find the proper doxology for the combination of offices.
  - If it exists, wrap the hymn's StructuredLookup in a thing that, when
    rendered, slurps the hymn's render structure and swaps out the doxology.
- Thing to remember: In 1962, exactly one hymn has a proper doxology, and only
  in Ascensiontide.  Maybe use templates for that???
- Q: Should the annotation go on the hymn in the translation, or in the generic
  stuff?  Although it's slightly redundant, I think I plump for doing it in the
  translation, because the generic mechanism for this sort of thing doesn't
  exist, and doing it in translation is actually more flexible: for example,
  imagine a translation into a different meter, with ad hoc fixups for the
  doxology using templates.
- Q: Can we use a heuristic to guess whether a hymn is iambic?  A bit iffy: it
  would also necessitate an explicit non-iambic annotation.
- OK, so follow-up Q: Can we make the annotation as lightweight as possible?
  I think the normal style of annotation is lightweight enough as it is.
- So it looks like this:
  - type:
      hymn-with-variable-doxology
    content:
      - - Ob hoc precátu súpplici
	- Te póscimus, piíssime;
	- In hoc triúmpho Mártyris
	- Dimítte noxam sérvulis.
      - - Laus et perénnis glória
	- Patri sit, atque Fílio,
	- Sancto simul Paráclito,
	- In sempitérna sǽcula.
	- Amen.
- How about the doxologies themselves?  Their form is straightforward
  enough -- they're just a HymnVerse (or perhaps a subclass thereof) -- but
  where do we put them?
  - Temporal ones are probably natural enough.
  - What about, e.g., during the octave of the Assumption?  Probably have some
    property on the day within the octave saying to use such-and-such a
    doxology.

Version-specific hour-specific rubrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Where should this logic live?
- E.g. suffrages: different in 1962, Divino, Tridentine.
- Probably the right thing is to have an object to call out to.  And/or resolve
  the differences in the process of generating the parameters to the hour's
  constructor (as for the calendar).
- Should suffrages be pre-resolved or JIT-resolved?
- Bear in mind that the logic is also different: Divino has the commemorated-
  double rule.

Suffrages
~~~~~~~~~
- Make the name of the titular less broken (cf. ferial preces in "Later").
  - Specifying the titular office isn't really related, so we'll leave that
    for now.
  - Simple case, where titular has an office of his own:
    - titular_name: proprium/s-andreae-apostoli/nomen
  - If the titular shares an office:
    - titular_name: proprium/ss-petri-et-pauli-apostolorum/nomen/s-petri
  - If the titular doesn't have an office, one has to be concoted.  So we can
    ignore this for now.
  - Names should (eventually) be pointers to some common repository of names,
    so that we can present a list of all names.

Regression testing
~~~~~~~~~~~~~~~~~~

- Pre-push needs:
  - Diff of two years: working tree vs HEAD
  - Need to generate datafiles for each
- CI needs:
  - Same, but needs to clone external repos first

E2E plan
~~~~~~~~

Complete calendar resolution logic
 - 1962
 - others
 - with test
First Vespers
Indirection mechanism
Conclusions to prayers
Triduum
Easter octave
"Alleluia" on everything in Eastertide
Suffrages
Vespers of the dead
Propers
From the chapter of the following
Versions


PoC features
~~~~~~~~~~~~
Sunday/vigil anticipation
- For vigils, on Saturdays, look at the next day's calpoints.
- For Sundays, see get_floating_anticipated_office() in calcalc.
Nice output
Local calendars
Dominican use?
Transfer calculation
Ordo recitandi??
- This will mean generating multiple offices on a single day.
PDF
Lauds
Sort out multiple offices assigned to same day (start with e.g. 2022-01-28).


Later
~~~~~

- Consider converting assertions to exceptions
- Put a formal spec on descriptors.  Case-sensitive?
- - time PYTHONPATH=src scripts/bringup.py -r divino --render tests/officium/{caltest,propers}.yaml 2021-3-12
  - The problem above is that BVM on Saturday is omitted on account of the
    greater feria, but that feria of course has no first vespers, and so
    there's nothing at first vespers to suppress it.  (Well, there's the
    Friday, but that's not the point.)  On the other hand, the vigil of
    Christmas behaves in the opposite way with respect to the fourth Sunday of
    Advent.  Fiddly.  You should wait until you have a suite of unit tests
    before attempting to fix this.
- Variable spacing for drop caps according to the letter.
- bringup-datagen handling for octave of the Epiphany.  See comment in make_calendar().
- First vespers of Easter should have prayer "Spiritum nobis".
- Easter octave: Benedicamus Domino, alleluja, alleluja.
- Asterisks in antiphons.
- Gregem tuum.
- Office of the dead leftovers:
  - No "Fidelium" at the end of Vespers of the day.
  - "Lauda" and what follows is all mangled.
- 1962: What happens to vigils when associated feasts are transferred?
  E.g. 2022-06-23.
- Doxology for the Transfiguration.  It's in a proper [Doxology] section in DO.
  Doesn't affect Vespers.  Same for Holy Family.
- 2021-5-6: Versicle "Sancti et justi" shouldn't be used for commem, because it
  was used in office of the day.
- mtv
- "N." in ferial preces is garbled.
- Fill out of_the_lord and of_the_blessed_virgin_mary.
- Divino: Simple feasts and octave days are not commemorated at first Vespers
  of doubles of the II. class (but they are at Lauds).


Next
~~~~


Right now
~~~~~~~~~
Multiple offices in one day
- Commemoratio [12]
- Commemoratio 3
  - Mostly Octave of Christmas
  - But also used for commemorations of first Vespers when the following day's
    office doesn't have first Vespers (e.g. comm. of St Christina on evening
    of 07-23, 07-24 being the vigil of St. James).
- Commemoratio
- Lectio93 (Lectio94 is for commemoration of the day)
- Commemoratio 5
  - 11-09.  It's the commemoration at first Vespers of the second Vespers of
    the preceding.
- Commemoratio4 (no space): Of St Peter/Paul.
- Commemoratio Sabbat

- In all cases, apply the thing to the commemorated office.  What if there's
  more than one??
  - 08-17 is in the wrong order:
      NOTE from much later: why do you think they're in the wrong order??
  - 08-09 and 06-28 only have one entry in [Commemoratio [12]], but also have
    [Oratio Vigilia], for two reasons:
    - Not commemorated in the office in Advent and Lent.
    - Antiphon and versicle come from the feria (!).
  - 07-01 only has one entry in [Commemoratio 2], but that's because the day
    within the octave of Ss. P and P disappears.
  - 10-07 and 11-04 are in the right order.

- Commemoratio 1
  - If you find a common, apply it to the whole thing (not just first VV).
  - Otherwise, antiphon for first Vespers of the commemorated office.
  - Prayer for the whole of the commemorated office.
- Commemoratio
  - As above, but nothing specific to first VV.
- Commemoratio [35]
  - Pfft.  Do some horrible hardcoding.  Or maybe we can just ignore it...
- Commemoratio4
  - Different in that it doesn't correspond to an office.  In many ways this
    behaves like a suffrage, except that it's made before the commemorations.
- Commemoratio Sabbat
  - Like Commemoratio, but with '/sabbato' or whatever.

Strategy:
- Fix the out-of-order offices on 08-17.
- Implement a mapping from DO-format commemoration sections to a dict with the
  following keys:
  - do-ref-file
  - do-ref-key
  - antiphon
  - versicle
  - prayer
- When creating redirections, use the following logic:
  - If it's a plain [Commemoratio] section with no number, treat it like
    [Commemoratio 1], ...2] and ...3] all at once.
- Map [Commemoratio] sections to the corresponding calendar entry (by order),
  excluding vigils.
- For [Commemoratio] (without a [123] designator), the inclusion is for Lauds
  and both VV.  This is trivial if there's no colon part in the inclusion, but
  if there is, you have to handle the fact that this means that, e.g.,
  @foo:Octava is a reference to [Octava [123]].
- Map [Oratio Vigilia] to the vigil in the calentry.
- Commemoratio4: Add a new "inseparable commemorations" concept that returns
  a list of keys.  In the data, make those keys of the form (e.g.)
  "in-conversione-s-pauli-apostoli/commemoratio-s-petri".  These need applied
  either after the prayer of the day _or_ after the commemoration of the office
  itself.
- @-refs behave differently in commemorations.
- Do something with [Octava \d]...
  - Turns out these are only used as inclusion targets, although there is
    intelligence for looking up [123].
- Make sure that the prayers get included in the conclusion-gathering logic.

Here are the formats.  They might or might not be prefaced with "!Commemoratio
S. Soandsoensis".

@foo

@foo:Oratio
# Equivalent to the above.  Useful with substitutions.

@foo:Octava

@Commune/C2:Oratio Gregem
# Never has anything after it.

@Commune/C2:Oratio1 Gregem

@foo:Oratio proper
$Oremus
Deus etc. etc.
$Per Dominum

@Commune/C2:Oratio proper Gregem
$Oremus
Deus etc. etc.
$Per Dominum

Ant. Similabo...
_
V. dfdfdsf
R. dfdfadf
_
$Oremus
Deus etc.
$Per Dominum

# N.B. There's no case of @ for the antiphon only.

Worked examples:
- DO:
    [Commemoratio]
    @Commune/C3:Oratio proper
    $Oremus
    Deus etc.
  officium:
    - proprium/s-someone-from-secondary-descs/oratio: Deus etc.
    - redirects:
      - proprium/s-someone-from-secondary-descs: commune/C3
- DO:
    [Commemoratio 1]
    @Commune/C3:Oratio proper
    $Oremus
    Deus etc.
  officium:
    - proprium/s-someone-from-secondary-descs/ad-i-vesperas/oratio: Deus etc.
    - redirects:
      - proprium/s-someone-from-secondary-descs/ad-i-vesperas: commune/C3/ad-i-vesperas
- DO:
    [Commemoratio]
    @Sancti/11-01:Octava
  officium:
    - redirects:
      - proprium/die-iii-infra-octavam-omnium-sanctorum/ad-i-vesperas: proprium/omnium-sanctorum/octava-1 #???
      # Currently it's octava-1.  But:
      #  - It should be split into antiphon+versicle+prayer.  (Although the
      #    inclusion as written above is OK, it's just the target that needs
      #    split.
      #  - It should be renamed.  (Leave this for another day if possible.)
      # Aha: If the post-colon part is anything other than "Oratio proper" or "Oratio Gregem", it's a normal
      # @-inclusion, and the included stuff should get the splitting treatment.  But you still need to handle
      # [123]-ness.
      # Aha bis: All of the above collapses to nothing if you expand the @-ref in situ.
      # Summary: Expand the inclusion in situ if:
      # - it's in the middle (this is the generic rule) (and I don't think it ever happens); or
      # - it's of the form @X:Y (but not just @X or @X:Oratio proper/Gregem).
      # In both cases, do [123].
      # Inclusions of the form in brackets in the second bullet can be handled with redirections.

DO THESE NEXT 2022-04-23:
- Find which entries to split.
- Find the cross-references.
I THINK THAT MEANS FINISHING THE PSEUDOCODE BELOW!
READ THE SUMMARY IN THE COMMENT ABOVE.

if section matches r"Commemoratio( \d)?":
    for i, com in enumerate(split at blank lines):
        # TODO: Expand inclusion if needed.
        calentry = non_vigils[i]
        if have_redirect:
            if have_digit:
                redirs = {path(calentry) + suffixes[digit]: path(inclusion_target) + suffixes[digit]}
            else:
                redirs = {path(calentry): path(inclusion_target)}
	for proper_path, proper_text in proper_bits(com):
            for n in indices:
                propers[path(calentry) + suffixes[n] + proper_path] = proper_text

elif section is "Oratio Vigilia":
    calentry, = vigils
    propers[path(calentry) + '/oratio'] = proper_text

OK, so yo've finlly got something working.  Things to check
- 11-04 (three offices: Charles, octave, Vit + Agric)
